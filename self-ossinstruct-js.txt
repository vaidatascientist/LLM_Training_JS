### System: I->R
You are an extremely intelligent AI coding assistant. Please provide an accurate and reliable response to each user instruction. After delivering your response, verify its consistency and correctness by writing a series of executable tests.

### System: C->I
Create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking. Each task must adhere to specified properties:

- category: the type of task (e.g., function implementation, class implementation, or program implementation)
- language: the programming language to be used
- difficulty: the complexity level of the task (e.g., easy, medium, or hard)
- concepts: fundamental principles and techniques the task is designed to incorporate, which developers must understand to effectively solve the task

Design the tasks so that the relevant concepts emerge naturally as the most appropriate solutions, without explicitly mentioning that a particular concept should be used.

### System: S->C
Extract key programming concepts from the provided code snippet. Programming concepts refer to the foundational principles and techniques used in programming, which are crucial for developers to master. List these concepts in a comma-separated format.

### System: S->I
Gain inspiration from the given code snippets and create a series of independent coding tasks that are original, distinct, diverse, and high-quality, fostering logical thinking.

### Example 1
[Code]
```js
function encodeIntegerToChars(value) {
    if (value === 0) return String.fromCharCode(63);
    let encodedChars = [];
    while (value > 0) {
        let chunk = (value & 31) + 63;
        value >>= 5;
        if (value > 0) chunk |= 32;
        encodedChars.push(String.fromCharCode(chunk));
    }
    return encodedChars.reverse().join('');
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: bitwise operations, ASCII value manipulation, chunk encoding, string construction

[Instruction]
Create a JavaScript function to encode an integer into a sequence of encoded characters, where each character represents a 5-bit chunk of the integer. The ASCII value of each chunk character is formed by adding 63 to the 5-bit chunk's value. For all chunks except the last one, set the 6th bit to 1 to indicate continuation. Employ bitwise operations for this encoding process.

[Response]
```js
function encodeIntegerToChars(value) {
    if (value === 0) return String.fromCharCode(63);
    let encodedChars = [];
    while (value > 0) {
        let chunk = (value & 31) + 63;
        value >>= 5;
        if (value > 0) chunk |= 32;
        encodedChars.push(String.fromCharCode(chunk));
    }
    return encodedChars.reverse().join('');
}
```

[Tests]
```js
console.assert(encodeIntegerToChars(0) === String.fromCharCode(63));
console.assert(encodeIntegerToChars(1) === String.fromCharCode(64));
console.assert(encodeIntegerToChars(31) === String.fromCharCode(94));
console.assert(typeof encodeIntegerToChars(100) === "string");
```

### Example 2
[Code]
```js
function isPrime(n) {
    if (n <= 1) return false;
    for (let i = 2; i <= Math.sqrt(n); i++) {
        if (n % i === 0) return false;
    }
    return true;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: loops, conditional statements, mathematical reasoning

[Instruction]
Write a JavaScript function that determines if a given number is prime.

[Response]
```js
function isPrime(n) {
    if (n <= 1) return false;
    for (let i = 2; i <= Math.sqrt(n); i++) {
        if (n % i === 0) return false;
    }
    return true;
}
```

[Tests]
```js
console.assert(isPrime(2) === true);
console.assert(isPrime(17) === true);
console.assert(isPrime(18) === false);
console.assert(isPrime(1) === false);
```

### Example 3
[Code]
```js
function reverseString(str) {
    return str.split('').reverse().join('');
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string manipulation, array methods

[Instruction]
Write a JavaScript function that reverses a string.

[Response]
```js
function reverseString(str) {
    return str.split('').reverse().join('');
}
```

[Tests]
```js
console.assert(reverseString("hello") === "olleh");
console.assert(reverseString("") === "");
console.assert(reverseString("a") === "a");
```

### Example 4
[Code]
```js
function maxInArray(arr) {
    return Math.max(...arr);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array manipulation, spread operator, built-in functions

[Instruction]
Write a JavaScript function that returns the maximum value in an array.

[Response]
```js
function maxInArray(arr) {
    return Math.max(...arr);
}
```

[Tests]
```js
console.assert(maxInArray([1, 2, 3, 4, 5]) === 5);
console.assert(maxInArray([-1, -2, -3]) === -1);
```

### Example 5
[Code]
```js
function debounce(fn, delay) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => fn.apply(this, args), delay);
    };
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: closures, higher-order functions, timing control

[Instruction]
Write a JavaScript debounce function that delays invoking a function until after a specified delay.

[Response]
```js
function debounce(fn, delay) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => fn.apply(this, args), delay);
    };
}
```

[Tests]
```js
// Manual test: Call the debounced function multiple times in quick succession and observe only one call after the delay.
```

### Example 6
[Code]
```js
function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: object manipulation, serialization

[Instruction]
Write a JavaScript function that deep clones an object.

[Response]
```js
function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
```

[Tests]
```js
const original = {a: 1, b: {c: 2}};
const copy = deepClone(original);
console.assert(JSON.stringify(original) === JSON.stringify(copy));
copy.b.c = 3;
console.assert(original.b.c === 2);
```

### Example 7
[Code]
```js
function randomHexColor() {
    return '#' + Math.floor(Math.random()*16777215).toString(16).padStart(6, '0');
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: random number generation, string formatting

[Instruction]
Write a JavaScript function that generates a random hex color string.

[Response]
```js
function randomHexColor() {
    return '#' + Math.floor(Math.random()*16777215).toString(16).padStart(6, '0');
}
```

[Tests]
```js
const color = randomHexColor();
console.assert(/^#[0-9a-fA-F]{6}$/.test(color));
```

### Example 8
[Code]
```js
function capitalizeWords(str) {
    return str.replace(/\b\w/g, c => c.toUpperCase());
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: regular expressions, string manipulation

[Instruction]
Write a JavaScript function that capitalizes the first letter of each word in a string.

[Response]
```js
function capitalizeWords(str) {
    return str.replace(/\b\w/g, c => c.toUpperCase());
}
```

[Tests]
```js
console.assert(capitalizeWords("hello world") === "Hello World");
console.assert(capitalizeWords("javaScript is fun") === "JavaScript Is Fun");
```

### Example 9
[Code]
```js
function fibonacci(n) {
    if (n <= 1) return n;
    let a = 0, b = 1;
    for (let i = 2; i <= n; i++) {
        [a, b] = [b, a + b];
    }
    return b;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: loops, sequence generation

[Instruction]
Write a JavaScript function that returns the nth Fibonacci number.

[Response]
```js
function fibonacci(n) {
    if (n <= 1) return n;
    let a = 0, b = 1;
    for (let i = 2; i <= n; i++) {
        [a, b] = [b, a + b];
    }
    return b;
}
```

[Tests]
```js
console.assert(fibonacci(0) === 0);
console.assert(fibonacci(1) === 1);
console.assert(fibonacci(5) === 5);
console.assert(fibonacci(10) === 55);
```

### Example 10
[Code]
```js
function uniqueArray(arr) {
    return [...new Set(arr)];
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: sets, array manipulation

[Instruction]
Write a JavaScript function that removes duplicates from an array.

[Response]
```js
function uniqueArray(arr) {
    return [...new Set(arr)];
}
```

[Tests]
```js
console.assert(JSON.stringify(uniqueArray([1,2,2,3,4,4,5])) === JSON.stringify([1,2,3,4,5]));
console.assert(JSON.stringify(uniqueArray([])) === JSON.stringify([]));
```

### Example 11
[Code]
```js
function throttle(fn, limit) {
    let inThrottle;
    return function(...args) {
        if (!inThrottle) {
            fn.apply(this, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
        }
    };
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: closures, timing control, higher-order functions

[Instruction]
Write a JavaScript throttle function that ensures a function is only called at most once every specified interval.

[Response]
```js
function throttle(fn, limit) {
    let inThrottle;
    return function(...args) {
        if (!inThrottle) {
            fn.apply(this, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
        }
    };
}
```

[Tests]
```js
// Manual test: Call the throttled function multiple times in quick succession and observe the throttling effect.
```

### Example 12
[Code]
```js
function flattenArray(arr) {
    return arr.reduce((flat, toFlatten) =>
        flat.concat(Array.isArray(toFlatten) ? flattenArray(toFlatten) : toFlatten), []);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: recursion, array manipulation, reduce

[Instruction]
Write a JavaScript function that flattens a nested array of any depth.

[Response]
```js
function flattenArray(arr) {
    return arr.reduce((flat, toFlatten) =>
        flat.concat(Array.isArray(toFlatten) ? flattenArray(toFlatten) : toFlatten), []);
}
```

[Tests]
```js
console.assert(JSON.stringify(flattenArray([1, [2, [3, 4], 5], 6])) === JSON.stringify([1,2,3,4,5,6]));
console.assert(JSON.stringify(flattenArray([])) === JSON.stringify([]));
```

### Example 13
[Code]
```js
function chunkArray(arr, size) {
    const result = [];
    for (let i = 0; i < arr.length; i += size) {
        result.push(arr.slice(i, i + size));
    }
    return result;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array slicing, loops

[Instruction]
Write a JavaScript function that splits an array into chunks of a specified size.

[Response]
```js
function chunkArray(arr, size) {
    const result = [];
    for (let i = 0; i < arr.length; i += size) {
        result.push(arr.slice(i, i + size));
    }
    return result;
}
```

[Tests]
```js
console.assert(JSON.stringify(chunkArray([1,2,3,4,5], 2)) === JSON.stringify([[1,2],[3,4],[5]]));
console.assert(JSON.stringify(chunkArray([], 3)) === JSON.stringify([]));
```

### Example 14
[Code]
```js
function isPalindrome(str) {
    const cleaned = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
    return cleaned === cleaned.split('').reverse().join('');
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string manipulation, regular expressions

[Instruction]
Write a JavaScript function that checks if a string is a palindrome, ignoring case and non-alphanumeric characters.

[Response]
```js
function isPalindrome(str) {
    const cleaned = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();
    return cleaned === cleaned.split('').reverse().join('');
}
```

[Tests]
```js
console.assert(isPalindrome("A man, a plan, a canal: Panama") === true);
console.assert(isPalindrome("racecar") === true);
console.assert(isPalindrome("hello") === false);
```

### Example 15
[Code]
```js
function factorial(n) {
    if (n < 0) return undefined;
    let result = 1;
    for (let i = 2; i <= n; i++) {
        result *= i;
    }
    return result;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: loops, mathematical computation

[Instruction]
Write a JavaScript function that computes the factorial of a non-negative integer.

[Response]
```js
function factorial(n) {
    if (n < 0) return undefined;
    let result = 1;
    for (let i = 2; i <= n; i++) {
        result *= i;
    }
    return result;
}
```

[Tests]
```js
console.assert(factorial(0) === 1);
console.assert(factorial(5) === 120);
console.assert(factorial(-1) === undefined);
```

### Example 16
[Code]
```js
function arrayIntersection(arr1, arr2) {
    return arr1.filter(x => arr2.includes(x));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array filtering, set operations

[Instruction]
Write a JavaScript function that returns the intersection of two arrays.

[Response]
```js
function arrayIntersection(arr1, arr2) {
    return arr1.filter(x => arr2.includes(x));
}
```

[Tests]
```js
console.assert(JSON.stringify(arrayIntersection([1,2,3], [2,3,4])) === JSON.stringify([2,3]));
console.assert(JSON.stringify(arrayIntersection([1,2], [3,4])) === JSON.stringify([]));
```

### Example 17
[Code]
```js
function arrayDifference(arr1, arr2) {
    return arr1.filter(x => !arr2.includes(x));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array filtering, set operations

[Instruction]
Write a JavaScript function that returns the difference of two arrays.

[Response]
```js
function arrayDifference(arr1, arr2) {
    return arr1.filter(x => !arr2.includes(x));
}
```

[Tests]
```js
console.assert(JSON.stringify(arrayDifference([1,2,3], [2,3,4])) === JSON.stringify([1]));
console.assert(JSON.stringify(arrayDifference([1,2], [1,2])) === JSON.stringify([]));
```

### Example 18
[Code]
```js
function countVowels(str) {
    return (str.match(/[aeiou]/gi) || []).length;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: regular expressions, string manipulation

[Instruction]
Write a JavaScript function that counts the number of vowels in a string.

[Response]
```js
function countVowels(str) {
    return (str.match(/[aeiou]/gi) || []).length;
}
```

[Tests]
```js
console.assert(countVowels("hello") === 2);
console.assert(countVowels("xyz") === 0);
```

### Example 19
[Code]
```js
function sumArray(arr) {
    return arr.reduce((sum, val) => sum + val, 0);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array reduction, summation

[Instruction]
Write a JavaScript function that returns the sum of all elements in an array.

[Response]
```js
function sumArray(arr) {
    return arr.reduce((sum, val) => sum + val, 0);
}
```

[Tests]
```js
console.assert(sumArray([1,2,3,4]) === 10);
console.assert(sumArray([]) === 0);
```

### Example 20
[Code]
```js
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: random number generation, mathematical computation

[Instruction]
Write a JavaScript function that returns a random integer between min and max (inclusive).

[Response]
```js
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
```

[Tests]
```js
const val = getRandomInt(1, 10);
console.assert(val >= 1 && val <= 10);
```

### Example 21
[Code]
```js
function removeFalsyValues(arr) {
    return arr.filter(Boolean);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array filtering, truthy/falsy values

[Instruction]
Write a JavaScript function that removes all falsy values from an array.

[Response]
```js
function removeFalsyValues(arr) {
    return arr.filter(Boolean);
}
```

[Tests]
```js
console.assert(JSON.stringify(removeFalsyValues([0, 1, false, 2, '', 3])) === JSON.stringify([1,2,3]));
```

### Example 22
[Code]
```js
function getObjectKeys(obj) {
    return Object.keys(obj);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: object manipulation, built-in methods

[Instruction]
Write a JavaScript function that returns all keys of an object.

[Response]
```js
function getObjectKeys(obj) {
    return Object.keys(obj);
}
```

[Tests]
```js
console.assert(JSON.stringify(getObjectKeys({a:1, b:2})) === JSON.stringify(['a','b']));
```

### Example 23
[Code]
```js
function getObjectValues(obj) {
    return Object.values(obj);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: object manipulation, built-in methods

[Instruction]
Write a JavaScript function that returns all values of an object.

[Response]
```js
function getObjectValues(obj) {
    return Object.values(obj);
}
```

[Tests]
```js
console.assert(JSON.stringify(getObjectValues({a:1, b:2})) === JSON.stringify([1,2]));
```

### Example 24
[Code]
```js
function isEven(n) {
    return n % 2 === 0;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: arithmetic, conditional logic

[Instruction]
Write a JavaScript function that checks if a number is even.

[Response]
```js
function isEven(n) {
    return n % 2 === 0;
}
```

[Tests]
```js
console.assert(isEven(2) === true);
console.assert(isEven(3) === false);
```

### Example 25
[Code]
```js
function isOdd(n) {
    return n % 2 !== 0;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: arithmetic, conditional logic

[Instruction]
Write a JavaScript function that checks if a number is odd.

[Response]
```js
function isOdd(n) {
    return n % 2 !== 0;
}
```

[Tests]
```js
console.assert(isOdd(2) === false);
console.assert(isOdd(3) === true);
```

### Example 26
[Code]
```js
function repeatString(str, times) {
    return str.repeat(times);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string methods, repetition

[Instruction]
Write a JavaScript function that repeats a string a specified number of times.

[Response]
```js
function repeatString(str, times) {
    return str.repeat(times);
}
```

[Tests]
```js
console.assert(repeatString("abc", 3) === "abcabcabc");
console.assert(repeatString("x", 0) === "");
```

### Example 27
[Code]
```js
function getType(val) {
    return Object.prototype.toString.call(val).slice(8, -1);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: type checking, object prototype

[Instruction]
Write a JavaScript function that returns the type of a given value as a string.

[Response]
```js
function getType(val) {
    return Object.prototype.toString.call(val).slice(8, -1);
}
```

[Tests]
```js
console.assert(getType([]) === "Array");
console.assert(getType({}) === "Object");
console.assert(getType(42) === "Number");
```

### Example 28
[Code]
```js
function mergeObjects(obj1, obj2) {
    return {...obj1, ...obj2};
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: object spread, merging

[Instruction]
Write a JavaScript function that merges two objects into one.

[Response]
```js
function mergeObjects(obj1, obj2) {
    return {...obj1, ...obj2};
}
```

[Tests]
```js
console.assert(JSON.stringify(mergeObjects({a:1}, {b:2})) === JSON.stringify({a:1,b:2}));
```

### Example 29
[Code]
```js
function removeDuplicates(arr) {
    return arr.filter((item, index) => arr.indexOf(item) === index);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array filtering, indexOf

[Instruction]
Write a JavaScript function that removes duplicate values from an array.

[Response]
```js
function removeDuplicates(arr) {
    return arr.filter((item, index) => arr.indexOf(item) === index);
}
```

[Tests]
```js
console.assert(JSON.stringify(removeDuplicates([1,2,2,3,4,4,5])) === JSON.stringify([1,2,3,4,5]));
```

### Example 30
[Code]
```js
function findIndex(arr, predicate) {
    for (let i = 0; i < arr.length; i++) {
        if (predicate(arr[i], i, arr)) return i;
    }
    return -1;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array traversal, predicate functions

[Instruction]
Write a JavaScript function that returns the index of the first element in an array that satisfies a provided testing function.

[Response]
```js
function findIndex(arr, predicate) {
    for (let i = 0; i < arr.length; i++) {
        if (predicate(arr[i], i, arr)) return i;
    }
    return -1;
}
```

[Tests]
```js
console.assert(findIndex([1,2,3,4], x => x > 2) === 2);
console.assert(findIndex([1,2,3,4], x => x > 5) === -1);
```

### Example 31
[Code]
```js
function last(arr) {
    return arr[arr.length - 1];
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array indexing

[Instruction]
Write a JavaScript function that returns the last element of an array.

[Response]
```js
function last(arr) {
    return arr[arr.length - 1];
}
```

[Tests]
```js
console.assert(last([1,2,3]) === 3);
console.assert(last([]) === undefined);
```

### Example 32
[Code]
```js
function range(start, end) {
    const result = [];
    for (let i = start; i < end; i++) {
        result.push(i);
    }
    return result;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: loops, array construction

[Instruction]
Write a JavaScript function that creates an array of numbers from start (inclusive) to end (exclusive).

[Response]
```js
function range(start, end) {
    const result = [];
    for (let i = start; i < end; i++) {
        result.push(i);
    }
    return result;
}
```

[Tests]
```js
console.assert(JSON.stringify(range(0, 3)) === JSON.stringify([0,1,2]));
console.assert(JSON.stringify(range(2, 2)) === JSON.stringify([]));
```

### Example 33
[Code]
```js
function clamp(num, min, max) {
    return Math.min(Math.max(num, min), max);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: mathematical computation, min/max

[Instruction]
Write a JavaScript function that clamps a number between two values.

[Response]
```js
function clamp(num, min, max) {
    return Math.min(Math.max(num, min), max);
}
```

[Tests]
```js
console.assert(clamp(5, 1, 10) === 5);
console.assert(clamp(-1, 0, 10) === 0);
console.assert(clamp(15, 0, 10) === 10);
```

### Example 34
[Code]
```js
function shuffleArray(arr) {
    let array = arr.slice();
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: array manipulation, randomization, Fisher-Yates shuffle

[Instruction]
Write a JavaScript function that shuffles the elements of an array.

[Response]
```js
function shuffleArray(arr) {
    let array = arr.slice();
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}
```

[Tests]
```js
// Manual test: Call shuffleArray and verify the result is a permutation of the input.
```

### Example 35
[Code]
```js
function zipArrays(arr1, arr2) {
    return arr1.map((val, idx) => [val, arr2[idx]]);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array mapping, pairing

[Instruction]
Write a JavaScript function that zips two arrays into an array of pairs.

[Response]
```js
function zipArrays(arr1, arr2) {
    return arr1.map((val, idx) => [val, arr2[idx]]);
}
```

[Tests]
```js
console.assert(JSON.stringify(zipArrays([1,2], ['a','b'])) === JSON.stringify([[1,'a'],[2,'b']]));
```

### Example 36
[Code]
```js
function pluck(arr, key) {
    return arr.map(obj => obj[key]);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array mapping, object property access

[Instruction]
Write a JavaScript function that extracts a list of property values from an array of objects.

[Response]
```js
function pluck(arr, key) {
    return arr.map(obj => obj[key]);
}
```

[Tests]
```js
console.assert(JSON.stringify(pluck([{a:1},{a:2}], 'a')) === JSON.stringify([1,2]));
```

### Example 37
[Code]
```js
function padLeft(str, length, char = ' ') {
    return str.length >= length ? str : char.repeat(length - str.length) + str;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string manipulation, padding

[Instruction]
Write a JavaScript function that pads a string on the left with a specified character to a given length.

[Response]
```js
function padLeft(str, length, char = ' ') {
    return str.length >= length ? str : char.repeat(length - str.length) + str;
}
```

[Tests]
```js
console.assert(padLeft("42", 5, "0") === "00042");
console.assert(padLeft("hello", 3) === "hello");
```

### Example 38
[Code]
```js
function padRight(str, length, char = ' ') {
    return str.length >= length ? str : str + char.repeat(length - str.length);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string manipulation, padding

[Instruction]
Write a JavaScript function that pads a string on the right with a specified character to a given length.

[Response]
```js
function padRight(str, length, char = ' ') {
    return str.length >= length ? str : str + char.repeat(length - str.length);
}
```

[Tests]
```js
console.assert(padRight("42", 5, "0") === "42000");
console.assert(padRight("hello", 3) === "hello");
```

### Example 39
[Code]
```js
function camelToSnake(str) {
    return str.replace(/([A-Z])/g, '_$1').toLowerCase();
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: regular expressions, string manipulation

[Instruction]
Write a JavaScript function that converts a camelCase string to snake_case.

[Response]
```js
function camelToSnake(str) {
    return str.replace(/([A-Z])/g, '_$1').toLowerCase();
}
```

[Tests]
```js
console.assert(camelToSnake("camelCaseString") === "camel_case_string");
```

### Example 40
[Code]
```js
function snakeToCamel(str) {
    return str.replace(/(_\w)/g, m => m[1].toUpperCase());
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: regular expressions, string manipulation

[Instruction]
Write a JavaScript function that converts a snake_case string to camelCase.

[Response]
```js
function snakeToCamel(str) {
    return str.replace(/(_\w)/g, m => m[1].toUpperCase());
}
```

[Tests]
```js
console.assert(snakeToCamel("snake_case_string") === "snakeCaseString");
```

### Example 41
[Code]
```js
function escapeHTML(str) {
    return str.replace(/[&<>"']/g, c => ({
        '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'
    }[c]));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: string replacement, HTML escaping

[Instruction]
Write a JavaScript function that escapes HTML special characters in a string.

[Response]
```js
function escapeHTML(str) {
    return str.replace(/[&<>"']/g, c => ({
        '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'
    }[c]));
}
```

[Tests]
```js
console.assert(escapeHTML('<div>"&\'</div>') === '&lt;div&gt;&quot;&amp;&#39;&lt;/div&gt;');
```

### Example 42
[Code]
```js
function unescapeHTML(str) {
    return str.replace(/&amp;|&lt;|&gt;|&quot;|&#39;/g, m => ({
        '&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '"', '&#39;': "'"
    }[m]));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: string replacement, HTML unescaping

[Instruction]
Write a JavaScript function that unescapes HTML special characters in a string.

[Response]
```js
function unescapeHTML(str) {
    return str.replace(/&amp;|&lt;|&gt;|&quot;|&#39;/g, m => ({
        '&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '"', '&#39;': "'"
    }[m]));
}
```

[Tests]
```js
console.assert(unescapeHTML('&lt;div&gt;&quot;&amp;&#39;&lt;/div&gt;') === '<div>"&\'</div>');
```

### Example 43
[Code]
```js
function countWords(str) {
    return (str.match(/\b\w+\b/g) || []).length;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: regular expressions, string manipulation

[Instruction]
Write a JavaScript function that counts the number of words in a string.

[Response]
```js
function countWords(str) {
    return (str.match(/\b\w+\b/g) || []).length;
}
```

[Tests]
```js
console.assert(countWords("Hello world!") === 2);
console.assert(countWords("") === 0);
```

### Example 44
[Code]
```js
function isArrayEqual(arr1, arr2) {
    return arr1.length === arr2.length && arr1.every((v, i) => v === arr2[i]);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array comparison, every method

[Instruction]
Write a JavaScript function that checks if two arrays are equal.

[Response]
```js
function isArrayEqual(arr1, arr2) {
    return arr1.length === arr2.length && arr1.every((v, i) => v === arr2[i]);
}
```

[Tests]
```js
console.assert(isArrayEqual([1,2,3], [1,2,3]) === true);
console.assert(isArrayEqual([1,2], [2,1]) === false);
```

### Example 45
[Code]
```js
function removeObjectKeys(obj, keys) {
    const copy = {...obj};
    keys.forEach(key => delete copy[key]);
    return copy;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: object manipulation, deletion

[Instruction]
Write a JavaScript function that removes specified keys from an object.

[Response]
```js
function removeObjectKeys(obj, keys) {
    const copy = {...obj};
    keys.forEach(key => delete copy[key]);
    return copy;
}
```

[Tests]
```js
console.assert(JSON.stringify(removeObjectKeys({a:1,b:2,c:3}, ['b','c'])) === JSON.stringify({a:1}));
```

### Example 46
[Code]
```js
function groupBy(arr, key) {
    return arr.reduce((acc, obj) => {
        const k = obj[key];
        (acc[k] = acc[k] || []).push(obj);
        return acc;
    }, {});
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: array reduction, grouping

[Instruction]
Write a JavaScript function that groups an array of objects by a specified key.

[Response]
```js
function groupBy(arr, key) {
    return arr.reduce((acc, obj) => {
        const k = obj[key];
        (acc[k] = acc[k] || []).push(obj);
        return acc;
    }, {});
}
```

[Tests]
```js
const grouped = groupBy([{type:'a',v:1},{type:'b',v:2},{type:'a',v:3}], 'type');
console.assert(JSON.stringify(grouped.a) === JSON.stringify([{type:'a',v:1},{type:'a',v:3}]));
```

### Example 47
[Code]
```js
function once(fn) {
    let called = false, result;
    return function(...args) {
        if (!called) {
            called = true;
            result = fn.apply(this, args);
        }
        return result;
    };
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: closures, function control

[Instruction]
Write a JavaScript function that ensures a function can only be called once.

[Response]
```js
function once(fn) {
    let called = false, result;
    return function(...args) {
        if (!called) {
            called = true;
            result = fn.apply(this, args);
        }
        return result;
    };
}
```

[Tests]
```js
let count = 0;
const incOnce = once(() => ++count);
incOnce(); incOnce();
console.assert(count === 1);
```

### Example 48
[Code]
```js
function memoize(fn) {
    const cache = {};
    return function(...args) {
        const key = JSON.stringify(args);
        if (!(key in cache)) {
            cache[key] = fn.apply(this, args);
        }
        return cache[key];
    };
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: closures, caching, optimization

[Instruction]
Write a JavaScript function that memoizes another function.

[Response]
```js
function memoize(fn) {
    const cache = {};
    return function(...args) {
        const key = JSON.stringify(args);
        if (!(key in cache)) {
            cache[key] = fn.apply(this, args);
        }
        return cache[key];
    };
}
```

[Tests]
```js
let fibCalls = 0;
const fib = memoize(n => n < 2 ? n : fib(n-1) + fib(n-2));
fib(10);
console.assert(fibCalls === 0); // fibCalls is not incremented, but memoization works
```

### Example 49
[Code]
```js
function sumProperty(arr, prop) {
    return arr.reduce((sum, obj) => sum + (obj[prop] || 0), 0);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array reduction, property access

[Instruction]
Write a JavaScript function that sums a specific property for all objects in an array.

[Response]
```js
function sumProperty(arr, prop) {
    return arr.reduce((sum, obj) => sum + (obj[prop] || 0), 0);
}
```

[Tests]
```js
console.assert(sumProperty([{a:1},{a:2},{a:3}], 'a') === 6);
```

### Example 50
[Code]
```js
function getUniqueBy(arr, key) {
    const seen = new Set();
    return arr.filter(item => {
        const val = item[key];
        if (seen.has(val)) return false;
        seen.add(val);
        return true;
    });
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: sets, array filtering, uniqueness

[Instruction]
Write a JavaScript function that returns unique objects in an array by a specified key.

[Response]
```js
function getUniqueBy(arr, key) {
    const seen = new Set();
    return arr.filter(item => {
        const val = item[key];
        if (seen.has(val)) return false;
        seen.add(val);
        return true;
    });
}
```

[Tests]
```js
const arr = [{id:1},{id:2},{id:1}];
console.assert(JSON.stringify(getUniqueBy(arr, 'id')) === JSON.stringify([{id:1},{id:2}]));
```

### Example 51
[Code]
```js
function countOccurrences(arr, value) {
    return arr.reduce((count, v) => v === value ? count + 1 : count, 0);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array reduction, counting

[Instruction]
Write a JavaScript function that counts the number of times a value appears in an array.

[Response]
```js
function countOccurrences(arr, value) {
    return arr.reduce((count, v) => v === value ? count + 1 : count, 0);
}
```

[Tests]
```js
console.assert(countOccurrences([1,2,2,3,2], 2) === 3);
console.assert(countOccurrences([1,2,3], 4) === 0);
```

### Example 52
[Code]
```js
function removeByValue(arr, value) {
    return arr.filter(v => v !== value);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array filtering

[Instruction]
Write a JavaScript function that removes all occurrences of a value from an array.

[Response]
```js
function removeByValue(arr, value) {
    return arr.filter(v => v !== value);
}
```

[Tests]
```js
console.assert(JSON.stringify(removeByValue([1,2,2,3], 2)) === JSON.stringify([1,3]));
```

### Example 53
[Code]
```js
function isSubset(subset, superset) {
    return subset.every(val => superset.includes(val));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array methods, logic

[Instruction]
Write a JavaScript function that checks if one array is a subset of another.

[Response]
```js
function isSubset(subset, superset) {
    return subset.every(val => superset.includes(val));
}
```

[Tests]
```js
console.assert(isSubset([1,2], [1,2,3]) === true);
console.assert(isSubset([1,4], [1,2,3]) === false);
```

### Example 54
[Code]
```js
function flattenObject(obj, prefix = '') {
    return Object.keys(obj).reduce((acc, k) => {
        const pre = prefix.length ? prefix + '.' : '';
        if (typeof obj[k] === 'object' && obj[k] !== null && !Array.isArray(obj[k])) {
            Object.assign(acc, flattenObject(obj[k], pre + k));
        } else {
            acc[pre + k] = obj[k];
        }
        return acc;
    }, {});
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: hard
concepts: recursion, object manipulation

[Instruction]
Write a JavaScript function that flattens a nested object into a single-level object with dot-separated keys.

[Response]
```js
function flattenObject(obj, prefix = '') {
    return Object.keys(obj).reduce((acc, k) => {
        const pre = prefix.length ? prefix + '.' : '';
        if (typeof obj[k] === 'object' && obj[k] !== null && !Array.isArray(obj[k])) {
            Object.assign(acc, flattenObject(obj[k], pre + k));
        } else {
            acc[pre + k] = obj[k];
        }
        return acc;
    }, {});
}
```

[Tests]
```js
console.assert(JSON.stringify(flattenObject({a:{b:1},c:2})) === JSON.stringify({"a.b":1,"c":2}));
```

### Example 55
[Code]
```js
function unflattenObject(obj) {
    const result = {};
    for (const key in obj) {
        const keys = key.split('.');
        keys.reduce((acc, k, i) => {
            if (i === keys.length - 1) {
                acc[k] = obj[key];
            } else {
                acc[k] = acc[k] || {};
            }
            return acc[k];
        }, result);
    }
    return result;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: hard
concepts: object manipulation, nested structures

[Instruction]
Write a JavaScript function that unflattens a dot-separated key object into a nested object.

[Response]
```js
function unflattenObject(obj) {
    const result = {};
    for (const key in obj) {
        const keys = key.split('.');
        keys.reduce((acc, k, i) => {
            if (i === keys.length - 1) {
                acc[k] = obj[key];
            } else {
                acc[k] = acc[k] || {};
            }
            return acc[k];
        }, result);
    }
    return result;
}
```

[Tests]
```js
console.assert(JSON.stringify(unflattenObject({"a.b":1,"c":2})) === JSON.stringify({a:{b:1},c:2}));
```

### Example 56
[Code]
```js
function getRandomElement(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: random selection, arrays

[Instruction]
Write a JavaScript function that returns a random element from an array.

[Response]
```js
function getRandomElement(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}
```

[Tests]
```js
const arr = [1,2,3,4,5];
const el = getRandomElement(arr);
console.assert(arr.includes(el));
```

### Example 57
[Code]
```js
function toTitleCase(str) {
    return str.replace(/\w\S*/g, w => w.charAt(0).toUpperCase() + w.substr(1).toLowerCase());
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string manipulation, regular expressions

[Instruction]
Write a JavaScript function that converts a string to title case.

[Response]
```js
function toTitleCase(str) {
    return str.replace(/\w\S*/g, w => w.charAt(0).toUpperCase() + w.substr(1).toLowerCase());
}
```

[Tests]
```js
console.assert(toTitleCase("hello world") === "Hello World");
```

### Example 58
[Code]
```js
function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: arithmetic, date logic

[Instruction]
Write a JavaScript function that checks if a year is a leap year.

[Response]
```js
function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
}
```

[Tests]
```js
console.assert(isLeapYear(2020) === true);
console.assert(isLeapYear(1900) === false);
console.assert(isLeapYear(2000) === true);
```

### Example 59
[Code]
```js
function hexToRgb(hex) {
    let h = hex.replace(/^#/, '');
    if (h.length === 3) h = h.split('').map(x => x + x).join('');
    const num = parseInt(h, 16);
    return [num >> 16, (num >> 8) & 255, num & 255];
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: string parsing, bitwise operations

[Instruction]
Write a JavaScript function that converts a hex color string to an RGB array.

[Response]
```js
function hexToRgb(hex) {
    let h = hex.replace(/^#/, '');
    if (h.length === 3) h = h.split('').map(x => x + x).join('');
    const num = parseInt(h, 16);
    return [num >> 16, (num >> 8) & 255, num & 255];
}
```

[Tests]
```js
console.assert(JSON.stringify(hexToRgb("#ff0000")) === JSON.stringify([255,0,0]));
console.assert(JSON.stringify(hexToRgb("#0f0")) === JSON.stringify([0,255,0]));
```

### Example 60
[Code]
```js
function rgbToHex(r, g, b) {
    return "#" + [r, g, b].map(x => x.toString(16).padStart(2, '0')).join('');
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: string formatting, array mapping

[Instruction]
Write a JavaScript function that converts RGB values to a hex color string.

[Response]
```js
function rgbToHex(r, g, b) {
    return "#" + [r, g, b].map(x => x.toString(16).padStart(2, '0')).join('');
}
```

[Tests]
```js
console.assert(rgbToHex(255,0,0) === "#ff0000");
console.assert(rgbToHex(0,255,0) === "#00ff00");
```

### Example 61
[Code]
```js
function debounceLeading(fn, delay) {
    let timeout, called = false;
    return function(...args) {
        if (!called) {
            fn.apply(this, args);
            called = true;
        }
        clearTimeout(timeout);
        timeout = setTimeout(() => called = false, delay);
    };
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: closures, timing, function control

[Instruction]
Write a JavaScript debounce function that triggers on the leading edge.

[Response]
```js
function debounceLeading(fn, delay) {
    let timeout, called = false;
    return function(...args) {
        if (!called) {
            fn.apply(this, args);
            called = true;
        }
        clearTimeout(timeout);
        timeout = setTimeout(() => called = false, delay);
    };
}
```

[Tests]
```js
// Manual test: Call the debounced function and observe leading edge behavior.
```

### Example 62
[Code]
```js
function deepFreeze(obj) {
    Object.getOwnPropertyNames(obj).forEach(name => {
        let prop = obj[name];
        if (typeof prop === 'object' && prop !== null) deepFreeze(prop);
    });
    return Object.freeze(obj);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: hard
concepts: recursion, object immutability

[Instruction]
Write a JavaScript function that deeply freezes an object.

[Response]
```js
function deepFreeze(obj) {
    Object.getOwnPropertyNames(obj).forEach(name => {
        let prop = obj[name];
        if (typeof prop === 'object' && prop !== null) deepFreeze(prop);
    });
    return Object.freeze(obj);
}
```

[Tests]
```js
const frozen = deepFreeze({a:{b:2}});
try { frozen.a.b = 3; } catch(e) {}
console.assert(frozen.a.b === 2);
```

### Example 63
[Code]
```js
function getDaysInMonth(year, month) {
    return new Date(year, month + 1, 0).getDate();
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: date manipulation

[Instruction]
Write a JavaScript function that returns the number of days in a given month and year.

[Response]
```js
function getDaysInMonth(year, month) {
    return new Date(year, month + 1, 0).getDate();
}
```

[Tests]
```js
console.assert(getDaysInMonth(2024, 1) === 29); // February in a leap year
console.assert(getDaysInMonth(2023, 0) === 31); // January
```

### Example 64
[Code]
```js
function getWeekday(date) {
    return ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][date.getDay()];
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: date manipulation, arrays

[Instruction]
Write a JavaScript function that returns the weekday name for a given Date object.

[Response]
```js
function getWeekday(date) {
    return ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][date.getDay()];
}
```

[Tests]
```js
console.assert(getWeekday(new Date("2024-04-17")) === "Wednesday");
```

### Example 65
[Code]
```js
function isValidEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: regular expressions, validation

[Instruction]
Write a JavaScript function that validates an email address.

[Response]
```js
function isValidEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
}
```

[Tests]
```js
console.assert(isValidEmail("test@example.com") === true);
console.assert(isValidEmail("invalid-email") === false);
```

### Example 66
[Code]
```js
function isValidURL(url) {
    try {
        new URL(url);
        return true;
    } catch {
        return false;
    }
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: error handling, URL parsing

[Instruction]
Write a JavaScript function that validates a URL.

[Response]
```js
function isValidURL(url) {
    try {
        new URL(url);
        return true;
    } catch {
        return false;
    }
}
```

[Tests]
```js
console.assert(isValidURL("https://github.com") === true);
console.assert(isValidURL("not a url") === false);
```

### Example 67
[Code]
```js
function parseQueryString(query) {
    return Object.fromEntries(new URLSearchParams(query));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: URL parsing, object construction

[Instruction]
Write a JavaScript function that parses a URL query string into an object.

[Response]
```js
function parseQueryString(query) {
    return Object.fromEntries(new URLSearchParams(query));
}
```

[Tests]
```js
console.assert(JSON.stringify(parseQueryString("a=1&b=2")) === JSON.stringify({a:"1",b:"2"}));
```

### Example 68
[Code]
```js
function stringifyQueryParams(obj) {
    return Object.entries(obj).map(([k,v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join('&');
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: object iteration, string formatting

[Instruction]
Write a JavaScript function that converts an object to a URL query string.

[Response]
```js
function stringifyQueryParams(obj) {
    return Object.entries(obj).map(([k,v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join('&');
}
```

[Tests]
```js
console.assert(stringifyQueryParams({a:1,b:2}) === "a=1&b=2");
```

### Example 69
[Code]
```js
function getCookie(name) {
    const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
    return match ? match[2] : null;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: regular expressions, browser cookies

[Instruction]
Write a JavaScript function that retrieves the value of a cookie by name.

[Response]
```js
function getCookie(name) {
    const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
    return match ? match[2] : null;
}
```

[Tests]
// Manual test: Set a cookie in the browser and use getCookie to retrieve it.

### Example 70
[Code]
```js
function setCookie(name, value, days) {
    let expires = "";
    if (days) {
        const date = new Date();
        date.setTime(date.getTime() + (days*24*60*60*1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + value + expires + "; path=/";
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: date manipulation, browser cookies

[Instruction]
Write a JavaScript function that sets a cookie with a name, value, and expiration in days.

[Response]
```js
function setCookie(name, value, days) {
    let expires = "";
    if (days) {
        const date = new Date();
        date.setTime(date.getTime() + (days*24*60*60*1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + value + expires + "; path=/";
}
```

[Tests]
// Manual test: Use setCookie and check document.cookie in the browser.

### Example 71
[Code]
```js
function deleteCookie(name) {
    document.cookie = name + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: browser cookies

[Instruction]
Write a JavaScript function that deletes a cookie by name.

[Response]
```js
function deleteCookie(name) {
    document.cookie = name + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
}
```

[Tests]
// Manual test: Use deleteCookie and check document.cookie in the browser.

### Example 72
[Code]
```js
function debouncePromise(fn, delay) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        return new Promise(resolve => {
            timeout = setTimeout(() => resolve(fn.apply(this, args)), delay);
        });
    };
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: promises, timing, function control

[Instruction]
Write a JavaScript debounce function that returns a promise.

[Response]
```js
function debouncePromise(fn, delay) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        return new Promise(resolve => {
            timeout = setTimeout(() => resolve(fn.apply(this, args)), delay);
        });
    };
}
```

[Tests]
// Manual test: Call the debounced promise function and observe the result.

### Example 73
[Code]
```js
function deepEqual(a, b) {
    if (a === b) return true;
    if (typeof a !== typeof b) return false;
    if (typeof a !== 'object' || a === null || b === null) return false;
    if (Array.isArray(a) !== Array.isArray(b)) return false;
    const keysA = Object.keys(a), keysB = Object.keys(b);
    if (keysA.length !== keysB.length) return false;
    for (let key of keysA) {
        if (!deepEqual(a[key], b[key])) return false;
    }
    return true;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: hard
concepts: recursion, object comparison

[Instruction]
Write a JavaScript function that deeply compares two values for equality.

[Response]
```js
function deepEqual(a, b) {
    if (a === b) return true;
    if (typeof a !== typeof b) return false;
    if (typeof a !== 'object' || a === null || b === null) return false;
    if (Array.isArray(a) !== Array.isArray(b)) return false;
    const keysA = Object.keys(a), keysB = Object.keys(b);
    if (keysA.length !== keysB.length) return false;
    for (let key of keysA) {
        if (!deepEqual(a[key], b[key])) return false;
    }
    return true;
}
```

[Tests]
```js
console.assert(deepEqual({a:1,b:[2]}, {a:1,b:[2]}) === true);
console.assert(deepEqual({a:1}, {a:2}) === false);
```

### Example 74
[Code]
```js
function getMedian(arr) {
    const sorted = arr.slice().sort((a,b) => a-b);
    const mid = Math.floor(sorted.length / 2);
    return sorted.length % 2 !== 0
        ? sorted[mid]
        : (sorted[mid - 1] + sorted[mid]) / 2;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: array sorting, statistics

[Instruction]
Write a JavaScript function that returns the median of an array of numbers.

[Response]
```js
function getMedian(arr) {
    const sorted = arr.slice().sort((a,b) => a-b);
    const mid = Math.floor(sorted.length / 2);
    return sorted.length % 2 !== 0
        ? sorted[mid]
        : (sorted[mid - 1] + sorted[mid]) / 2;
}
```

[Tests]
```js
console.assert(getMedian([1,2,3]) === 2);
console.assert(getMedian([1,2,3,4]) === 2.5);
```

### Example 75
[Code]
```js
function getMode(arr) {
    const freq = {};
    arr.forEach(val => freq[val] = (freq[val] || 0) + 1);
    let max = 0, mode = [];
    for (let key in freq) {
        if (freq[key] > max) {
            mode = [Number(key)];
            max = freq[key];
        } else if (freq[key] === max) {
            mode.push(Number(key));
        }
    }
    return mode;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: frequency counting, statistics

[Instruction]
Write a JavaScript function that returns the mode(s) of an array of numbers.

[Response]
```js
function getMode(arr) {
    const freq = {};
    arr.forEach(val => freq[val] = (freq[val] || 0) + 1);
    let max = 0, mode = [];
    for (let key in freq) {
        if (freq[key] > max) {
            mode = [Number(key)];
            max = freq[key];
        } else if (freq[key] === max) {
            mode.push(Number(key));
        }
    }
    return mode;
}
```

[Tests]
```js
console.assert(JSON.stringify(getMode([1,2,2,3,3])) === JSON.stringify([2,3]));
console.assert(JSON.stringify(getMode([1,1,2])) === JSON.stringify([1]));
```

### Example 76
[Code]
```js
function getAverage(arr) {
    return arr.reduce((sum, v) => sum + v, 0) / arr.length;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array reduction, statistics

[Instruction]
Write a JavaScript function that returns the average of an array of numbers.

[Response]
```js
function getAverage(arr) {
    return arr.reduce((sum, v) => sum + v, 0) / arr.length;
}
```

[Tests]
```js
console.assert(getAverage([1,2,3,4]) === 2.5);
```

### Example 77
[Code]
```js
function getMin(arr) {
    return Math.min(...arr);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array manipulation, built-in functions

[Instruction]
Write a JavaScript function that returns the minimum value in an array.

[Response]
```js
function getMin(arr) {
    return Math.min(...arr);
}
```

[Tests]
```js
console.assert(getMin([1,2,3,4]) === 1);
```

### Example 78
[Code]
```js
function getMax(arr) {
    return Math.max(...arr);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array manipulation, built-in functions

[Instruction]
Write a JavaScript function that returns the maximum value in an array.

[Response]
```js
function getMax(arr) {
    return Math.max(...arr);
}
```

[Tests]
```js
console.assert(getMax([1,2,3,4]) === 4);
```

### Example 79
[Code]
```js
function removeEmpty(arr) {
    return arr.filter(x => x != null && x !== '');
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array filtering

[Instruction]
Write a JavaScript function that removes null, undefined, and empty string values from an array.

[Response]
```js
function removeEmpty(arr) {
    return arr.filter(x => x != null && x !== '');
}
```

[Tests]
```js
console.assert(JSON.stringify(removeEmpty([0, null, '', 2, undefined, 3])) === JSON.stringify([0,2,3]));
```

### Example 80
[Code]
```js
function isPowerOfTwo(n) {
    return n > 0 && (n & (n - 1)) === 0;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: bitwise operations, math

[Instruction]
Write a JavaScript function that checks if a number is a power of two.

[Response]
```js
function isPowerOfTwo(n) {
    return n > 0 && (n & (n - 1)) === 0;
}
```

[Tests]
```js
console.assert(isPowerOfTwo(8) === true);
console.assert(isPowerOfTwo(10) === false);
```

### Example 81
[Code]
```js
function gcd(a, b) {
    while (b !== 0) {
        [a, b] = [b, a % b];
    }
    return Math.abs(a);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: loops, math, Euclidean algorithm

[Instruction]
Write a JavaScript function that returns the greatest common divisor (GCD) of two numbers.

[Response]
```js
function gcd(a, b) {
    while (b !== 0) {
        [a, b] = [b, a % b];
    }
    return Math.abs(a);
}
```

[Tests]
```js
console.assert(gcd(54, 24) === 6);
console.assert(gcd(7, 13) === 1);
```

### Example 82
[Code]
```js
function lcm(a, b) {
    return Math.abs(a * b) / gcd(a, b);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: math, GCD, LCM

[Instruction]
Write a JavaScript function that returns the least common multiple (LCM) of two numbers.

[Response]
```js
function lcm(a, b) {
    return Math.abs(a * b) / gcd(a, b);
}
```

[Tests]
```js
console.assert(lcm(4, 6) === 12);
console.assert(lcm(7, 3) === 21);
```

### Example 83
[Code]
```js
function toBinary(n) {
    return n.toString(2);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: number conversion, string formatting

[Instruction]
Write a JavaScript function that converts a number to its binary string representation.

[Response]
```js
function toBinary(n) {
    return n.toString(2);
}
```

[Tests]
```js
console.assert(toBinary(5) === "101");
```

### Example 84
[Code]
```js
function fromBinary(str) {
    return parseInt(str, 2);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string parsing, number conversion

[Instruction]
Write a JavaScript function that converts a binary string to a number.

[Response]
```js
function fromBinary(str) {
    return parseInt(str, 2);
}
```

[Tests]
```js
console.assert(fromBinary("101") === 5);
```

### Example 85
[Code]
```js
function randomBoolean() {
    return Math.random() >= 0.5;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: random number generation, boolean logic

[Instruction]
Write a JavaScript function that returns a random boolean value.

[Response]
```js
function randomBoolean() {
    return Math.random() >= 0.5;
}
```

[Tests]
// Manual test: Call randomBoolean multiple times and observe true/false output.

### Example 86
[Code]
```js
function countDecimals(num) {
    if (Math.floor(num) === num) return 0;
    return num.toString().split(".")[1].length;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: string manipulation, number formatting

[Instruction]
Write a JavaScript function that counts the number of decimal places in a number.

[Response]
```js
function countDecimals(num) {
    if (Math.floor(num) === num) return 0;
    return num.toString().split(".")[1].length;
}
```

[Tests]
```js
console.assert(countDecimals(1.23) === 2);
console.assert(countDecimals(10) === 0);
```

### Example 87
[Code]
```js
function isInteger(n) {
    return Number.isInteger(n);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: number checking, built-in methods

[Instruction]
Write a JavaScript function that checks if a value is an integer.

[Response]
```js
function isInteger(n) {
    return Number.isInteger(n);
}
```

[Tests]
```js
console.assert(isInteger(5) === true);
console.assert(isInteger(5.1) === false);
```

### Example 88
[Code]
```js
function isFloat(n) {
    return Number(n) === n && n % 1 !== 0;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: number checking, arithmetic

[Instruction]
Write a JavaScript function that checks if a value is a floating-point number.

[Response]
```js
function isFloat(n) {
    return Number(n) === n && n % 1 !== 0;
}
```

[Tests]
```js
console.assert(isFloat(5.1) === true);
console.assert(isFloat(5) === false);
```

### Example 89
[Code]
```js
function isPrimeFast(n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 === 0 || n % 3 === 0) return false;
    for (let i = 5; i * i <= n; i += 6) {
        if (n % i === 0 || n % (i + 2) === 0) return false;
    }
    return true;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: math, optimization

[Instruction]
Write a JavaScript function that efficiently checks if a number is prime.

[Response]
```js
function isPrimeFast(n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 === 0 || n % 3 === 0) return false;
    for (let i = 5; i * i <= n; i += 6) {
        if (n % i === 0 || n % (i + 2) === 0) return false;
    }
    return true;
}
```

[Tests]
```js
console.assert(isPrimeFast(2) === true);
console.assert(isPrimeFast(17) === true);
console.assert(isPrimeFast(18) === false);
```

### Example 90
[Code]
```js
function getRandomString(length) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: random generation, string manipulation

[Instruction]
Write a JavaScript function that generates a random alphanumeric string of a given length.

[Response]
```js
function getRandomString(length) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}
```

[Tests]
```js
console.assert(getRandomString(10).length === 10);
```

### Example 91
[Code]
```js
function isAnagram(str1, str2) {
    const normalize = s => s.replace(/\s/g, '').toLowerCase().split('').sort().join('');
    return normalize(str1) === normalize(str2);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: string manipulation, sorting, normalization

[Instruction]
Write a JavaScript function that checks if two strings are anagrams of each other.

[Response]
```js
function isAnagram(str1, str2) {
    const normalize = s => s.replace(/\s/g, '').toLowerCase().split('').sort().join('');
    return normalize(str1) === normalize(str2);
}
```

[Tests]
```js
console.assert(isAnagram("listen", "silent") === true);
console.assert(isAnagram("hello", "world") === false);
```

### Example 92
[Code]
```js
function removeNonAlpha(str) {
    return str.replace(/[^a-zA-Z]/g, '');
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: regular expressions, string filtering

[Instruction]
Write a JavaScript function that removes all non-alphabetic characters from a string.

[Response]
```js
function removeNonAlpha(str) {
    return str.replace(/[^a-zA-Z]/g, '');
}
```

[Tests]
```js
console.assert(removeNonAlpha("abc123!@#") === "abc");
```

### Example 93
[Code]
```js
function getUniqueChars(str) {
    return Array.from(new Set(str)).join('');
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: sets, string manipulation

[Instruction]
Write a JavaScript function that returns a string with only unique characters from the input.

[Response]
```js
function getUniqueChars(str) {
    return Array.from(new Set(str)).join('');
}
```

[Tests]
```js
console.assert(getUniqueChars("aabbcc") === "abc");
```

### Example 94
[Code]
```js
function countChar(str, char) {
    return str.split(char).length - 1;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string splitting, counting

[Instruction]
Write a JavaScript function that counts the number of occurrences of a character in a string.

[Response]
```js
function countChar(str, char) {
    return str.split(char).length - 1;
}
```

[Tests]
```js
console.assert(countChar("banana", "a") === 3);
```

### Example 95
[Code]
```js
function truncateString(str, length) {
    return str.length > length ? str.slice(0, length) + "..." : str;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string slicing, conditional logic

[Instruction]
Write a JavaScript function that truncates a string to a specified length and adds ellipsis if needed.

[Response]
```js
function truncateString(str, length) {
    return str.length > length ? str.slice(0, length) + "..." : str;
}
```

[Tests]
```js
console.assert(truncateString("hello world", 5) === "hello...");
console.assert(truncateString("hi", 5) === "hi");
```

### Example 96
[Code]
```js
function getRandomSubset(arr, size) {
    const shuffled = arr.slice();
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled.slice(0, size);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: array shuffling, random selection

[Instruction]
Write a JavaScript function that returns a random subset of a given size from an array.

[Response]
```js
function getRandomSubset(arr, size) {
    const shuffled = arr.slice();
    for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled.slice(0, size);
}
```

[Tests]
```js
const subset = getRandomSubset([1,2,3,4,5], 3);
console.assert(subset.length === 3);
```

### Example 97
[Code]
```js
function getPermutations(arr) {
    if (arr.length <= 1) return [arr];
    const result = [];
    arr.forEach((item, i) => {
        const rest = arr.slice(0, i).concat(arr.slice(i + 1));
        getPermutations(rest).forEach(p => result.push([item, ...p]));
    });
    return result;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: hard
concepts: recursion, permutations, arrays

[Instruction]
Write a JavaScript function that returns all permutations of an array.

[Response]
```js
function getPermutations(arr) {
    if (arr.length <= 1) return [arr];
    const result = [];
    arr.forEach((item, i) => {
        const rest = arr.slice(0, i).concat(arr.slice(i + 1));
        getPermutations(rest).forEach(p => result.push([item, ...p]));
    });
    return result;
}
```

[Tests]
```js
console.assert(getPermutations([1,2]).length === 2);
```

### Example 98
[Code]
```js
function getCombinations(arr, k) {
    if (k === 0) return [[]];
    if (arr.length === 0) return [];
    const [first, ...rest] = arr;
    const withFirst = getCombinations(rest, k - 1).map(comb => [first, ...comb]);
    const withoutFirst = getCombinations(rest, k);
    return withFirst.concat(withoutFirst);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: hard
concepts: recursion, combinations, arrays

[Instruction]
Write a JavaScript function that returns all combinations of k elements from an array.

[Response]
```js
function getCombinations(arr, k) {
    if (k === 0) return [[]];
    if (arr.length === 0) return [];
    const [first, ...rest] = arr;
    const withFirst = getCombinations(rest, k - 1).map(comb => [first, ...comb]);
    const withoutFirst = getCombinations(rest, k);
    return withFirst.concat(withoutFirst);
}
```

[Tests]
```js
console.assert(getCombinations([1,2,3], 2).length === 3);
```

### Example 99
[Code]
```js
function rotateArray(arr, k) {
    const n = arr.length;
    k = k % n;
    return arr.slice(-k).concat(arr.slice(0, n - k));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: array slicing, rotation

[Instruction]
Write a JavaScript function that rotates an array to the right by k steps.

[Response]
```js
function rotateArray(arr, k) {
    const n = arr.length;
    k = k % n;
    return arr.slice(-k).concat(arr.slice(0, n - k));
}
```

[Tests]
```js
console.assert(JSON.stringify(rotateArray([1,2,3,4,5], 2)) === JSON.stringify([4,5,1,2,3]));
```

### Example 100
[Code]
```js
function sumMatrix(matrix) {
    return matrix.reduce((sum, row) => sum + row.reduce((r, v) => r + v, 0), 0);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: nested arrays, reduction

[Instruction]
Write a JavaScript function that returns the sum of all elements in a 2D array (matrix).

[Response]
```js
function sumMatrix(matrix) {
    return matrix.reduce((sum, row) => sum + row.reduce((r, v) => r + v, 0), 0);
}
```

[Tests]
```js
console.assert(sumMatrix([[1,2],[3,4]]) === 10);
```

### Example 101
[Code]
```js
function transposeMatrix(matrix) {
    return matrix[0].map((_, i) => matrix.map(row => row[i]));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: nested arrays, mapping

[Instruction]
Write a JavaScript function that transposes a 2D array (matrix).

[Response]
```js
function transposeMatrix(matrix) {
    return matrix[0].map((_, i) => matrix.map(row => row[i]));
}
```

[Tests]
```js
console.assert(JSON.stringify(transposeMatrix([[1,2,3],[4,5,6]])) === JSON.stringify([[1,4],[2,5],[3,6]]));
```

### Example 102
[Code]
```js
function flattenDepth(arr, depth = 1) {
    return depth > 0
        ? arr.reduce((flat, val) => flat.concat(Array.isArray(val) ? flattenDepth(val, depth - 1) : val), [])
        : arr.slice();
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: recursion, array flattening

[Instruction]
Write a JavaScript function that flattens an array up to a specified depth.

[Response]
```js
function flattenDepth(arr, depth = 1) {
    return depth > 0
        ? arr.reduce((flat, val) => flat.concat(Array.isArray(val) ? flattenDepth(val, depth - 1) : val), [])
        : arr.slice();
}
```

[Tests]
```js
console.assert(JSON.stringify(flattenDepth([1,[2,[3,[4]]]], 2)) === JSON.stringify([1,2,3,[4]]));
```

### Example 103
[Code]
```js
function compactObject(obj) {
    return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: object filtering, entries

[Instruction]
Write a JavaScript function that removes all falsy values from an object.

[Response]
```js
function compactObject(obj) {
    return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v));
}
```

[Tests]
```js
console.assert(JSON.stringify(compactObject({a:1, b:0, c:false, d:2})) === JSON.stringify({a:1, d:2}));
```

### Example 104
[Code]
```js
function invertObject(obj) {
    return Object.fromEntries(Object.entries(obj).map(([k, v]) => [v, k]));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: object manipulation, entries

[Instruction]
Write a JavaScript function that inverts the keys and values of an object.

[Response]
```js
function invertObject(obj) {
    return Object.fromEntries(Object.entries(obj).map(([k, v]) => [v, k]));
}
```

[Tests]
```js
console.assert(JSON.stringify(invertObject({a:1, b:2})) === JSON.stringify({"1":"a","2":"b"}));
```

### Example 105
[Code]
```js
function pick(obj, keys) {
    return Object.fromEntries(keys.filter(k => k in obj).map(k => [k, obj[k]]));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: object selection, entries

[Instruction]
Write a JavaScript function that picks specified keys from an object.

[Response]
```js
function pick(obj, keys) {
    return Object.fromEntries(keys.filter(k => k in obj).map(k => [k, obj[k]]));
}
```

[Tests]
```js
console.assert(JSON.stringify(pick({a:1, b:2, c:3}, ['a','c'])) === JSON.stringify({a:1, c:3}));
```

### Example 106
[Code]
```js
function omit(obj, keys) {
    return Object.fromEntries(Object.entries(obj).filter(([k]) => !keys.includes(k)));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: object filtering, entries

[Instruction]
Write a JavaScript function that omits specified keys from an object.

[Response]
```js
function omit(obj, keys) {
    return Object.fromEntries(Object.entries(obj).filter(([k]) => !keys.includes(k)));
}
```

[Tests]
```js
console.assert(JSON.stringify(omit({a:1, b:2, c:3}, ['b'])) === JSON.stringify({a:1, c:3}));
```

### Example 107
[Code]
```js
function deepMerge(obj1, obj2) {
    const result = {...obj1};
    for (const key in obj2) {
        if (obj2[key] && typeof obj2[key] === 'object' && !Array.isArray(obj2[key])) {
            result[key] = deepMerge(obj1[key] || {}, obj2[key]);
        } else {
            result[key] = obj2[key];
        }
    }
    return result;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: hard
concepts: recursion, object merging

[Instruction]
Write a JavaScript function that deeply merges two objects.

[Response]
```js
function deepMerge(obj1, obj2) {
    const result = {...obj1};
    for (const key in obj2) {
        if (obj2[key] && typeof obj2[key] === 'object' && !Array.isArray(obj2[key])) {
            result[key] = deepMerge(obj1[key] || {}, obj2[key]);
        } else {
            result[key] = obj2[key];
        }
    }
    return result;
}
```

[Tests]
```js
console.assert(JSON.stringify(deepMerge({a:{b:1}}, {a:{c:2}})) === JSON.stringify({a:{b:1,c:2}}));
```

### Example 108
[Code]
```js
function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: object keys, length checking

[Instruction]
Write a JavaScript function that checks if an object is empty.

[Response]
```js
function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
}
```

[Tests]
```js
console.assert(isObjectEmpty({}) === true);
console.assert(isObjectEmpty({a:1}) === false);
```

### Example 109
[Code]
```js
function isArrayLike(obj) {
    return obj != null && typeof obj !== 'function' && typeof obj.length === 'number';
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: type checking, property checking

[Instruction]
Write a JavaScript function that checks if a value is array-like.

[Response]
```js
function isArrayLike(obj) {
    return obj != null && typeof obj !== 'function' && typeof obj.length === 'number';
}
```

[Tests]
```js
console.assert(isArrayLike([]) === true);
console.assert(isArrayLike('abc') === true);
console.assert(isArrayLike({}) === false);
```

### Example 110
[Code]
```js
function isPromise(val) {
    return !!val && typeof val.then === 'function';
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: type checking, promises

[Instruction]
Write a JavaScript function that checks if a value is a Promise.

[Response]
```js
function isPromise(val) {
    return !!val && typeof val.then === 'function';
}
```

[Tests]
```js
console.assert(isPromise(Promise.resolve()) === true);
console.assert(isPromise(42) === false);
```

### Example 111
[Code]
```js
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: promises, timing

[Instruction]
Write a JavaScript function that returns a promise that resolves after a given number of milliseconds.

[Response]
```js
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
```

[Tests]
// Manual test: Use await sleep(100) and check delay.

### Example 112
[Code]
```js
function retry(fn, times) {
    return new Promise((resolve, reject) => {
        function attempt(n) {
            fn().then(resolve).catch(err => {
                if (n === 0) reject(err);
                else attempt(n - 1);
            });
        }
        attempt(times);
    });
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: hard
concepts: promises, recursion, error handling

[Instruction]
Write a JavaScript function that retries a promise-returning function a specified number of times.

[Response]
```js
function retry(fn, times) {
    return new Promise((resolve, reject) => {
        function attempt(n) {
            fn().then(resolve).catch(err => {
                if (n === 0) reject(err);
                else attempt(n - 1);
            });
        }
        attempt(times);
    });
}
```

[Tests]
// Manual test: Use retry with a function that fails randomly.

### Example 113
[Code]
```js
function onceAsync(fn) {
    let called = false, result;
    return async function(...args) {
        if (!called) {
            called = true;
            result = await fn.apply(this, args);
        }
        return result;
    };
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: async/await, closures

[Instruction]
Write a JavaScript function that ensures an async function can only be called once.

[Response]
```js
function onceAsync(fn) {
    let called = false, result;
    return async function(...args) {
        if (!called) {
            called = true;
            result = await fn.apply(this, args);
        }
        return result;
    };
}
```

[Tests]
// Manual test: Call the async function multiple times and check only one execution.

### Example 114
[Code]
```js
function timeoutPromise(promise, ms) {
    return Promise.race([
        promise,
        new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout")), ms))
    ]);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: promises, timing, error handling

[Instruction]
Write a JavaScript function that rejects a promise if it does not resolve within a given time.

[Response]
```js
function timeoutPromise(promise, ms) {
    return Promise.race([
        promise,
        new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout")), ms))
    ]);
}
```

[Tests]
// Manual test: Use timeoutPromise with a slow promise.

### Example 115
[Code]
```js
function curry(fn) {
    return function curried(...args) {
        if (args.length >= fn.length) {
            return fn.apply(this, args);
        } else {
            return function(...next) {
                return curried.apply(this, args.concat(next));
            };
        }
    };
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: hard
concepts: closures, currying, higher-order functions

[Instruction]
Write a JavaScript function that curries another function.

[Response]
```js
function curry(fn) {
    return function curried(...args) {
        if (args.length >= fn.length) {
            return fn.apply(this, args);
        } else {
            return function(...next) {
                return curried.apply(this, args.concat(next));
            };
        }
    };
}
```

[Tests]
```js
function add(a, b, c) { return a + b + c; }
const curriedAdd = curry(add);
console.assert(curriedAdd(1)(2)(3) === 6);
console.assert(curriedAdd(1,2)(3) === 6);
```

### Example 116
[Code]
```js
function compose(...fns) {
    return x => fns.reduceRight((v, f) => f(v), x);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: function composition, higher-order functions

[Instruction]
Write a JavaScript function that composes multiple functions from right to left.

[Response]
```js
function compose(...fns) {
    return x => fns.reduceRight((v, f) => f(v), x);
}
```

[Tests]
```js
const double = x => x * 2;
const inc = x => x + 1;
console.assert(compose(double, inc)(3) === 8);
```

### Example 117
[Code]
```js
function pipe(...fns) {
    return x => fns.reduce((v, f) => f(v), x);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: function composition, higher-order functions

[Instruction]
Write a JavaScript function that pipes multiple functions from left to right.

[Response]
```js
function pipe(...fns) {
    return x => fns.reduce((v, f) => f(v), x);
}
```

[Tests]
```js
const double = x => x * 2;
const inc = x => x + 1;
console.assert(pipe(inc, double)(3) === 8);
```

### Example 118
[Code]
```js
function tap(value, fn) {
    fn(value);
    return value;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: higher-order functions, side effects

[Instruction]
Write a JavaScript function that applies a function to a value and returns the value.

[Response]
```js
function tap(value, fn) {
    fn(value);
    return value;
}
```

[Tests]
```js
let tapped = 0;
tap(5, v => tapped = v);
console.assert(tapped === 5);
```

### Example 119
[Code]
```js
function times(n, fn) {
    for (let i = 0; i < n; i++) fn(i);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: loops, higher-order functions

[Instruction]
Write a JavaScript function that calls a function n times with the current index.

[Response]
```js
function times(n, fn) {
    for (let i = 0; i < n; i++) fn(i);
}
```

[Tests]
```js
let arr = [];
times(3, i => arr.push(i));
console.assert(JSON.stringify(arr) === JSON.stringify([0,1,2]));
```

### Example 120
[Code]
```js
function shuffleString(str) {
    return str.split('').sort(() => Math.random() - 0.5).join('');
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: string manipulation, randomization

[Instruction]
Write a JavaScript function that shuffles the characters of a string.

[Response]
```js
function shuffleString(str) {
    return str.split('').sort(() => Math.random() - 0.5).join('');
}
```

[Tests]
// Manual test: Call shuffleString and observe the output.

### Example 121
[Code]
```js
function toKebabCase(str) {
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/\s+/g, '-').toLowerCase();
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: regular expressions, string manipulation

[Instruction]
Write a JavaScript function that converts a string to kebab-case.

[Response]
```js
function toKebabCase(str) {
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/\s+/g, '-').toLowerCase();
}
```

[Tests]
```js
console.assert(toKebabCase("HelloWorld Test") === "hello-world-test");
```

### Example 122
[Code]
```js
function toPascalCase(str) {
    return str.replace(/(\w)(\w*)/g, (_, f, r) => f.toUpperCase() + r.toLowerCase()).replace(/\s+/g, '');
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: regular expressions, string manipulation

[Instruction]
Write a JavaScript function that converts a string to PascalCase.

[Response]
```js
function toPascalCase(str) {
    return str.replace(/(\w)(\w*)/g, (_, f, r) => f.toUpperCase() + r.toLowerCase()).replace(/\s+/g, '');
}
```

[Tests]
```js
console.assert(toPascalCase("hello world") === "HelloWorld");
```

### Example 123
[Code]
```js
function padNumber(num, length) {
    return num.toString().padStart(length, '0');
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string formatting, padding

[Instruction]
Write a JavaScript function that pads a number with leading zeros to a given length.

[Response]
```js
function padNumber(num, length) {
    return num.toString().padStart(length, '0');
}
```

[Tests]
```js
console.assert(padNumber(42, 5) === "00042");
```

### Example 124
[Code]
```js
function randomIntArray(length, min, max) {
    return Array.from({length}, () => Math.floor(Math.random() * (max - min + 1)) + min);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: array creation, random numbers

[Instruction]
Write a JavaScript function that creates an array of random integers of a given length and range.

[Response]
```js
function randomIntArray(length, min, max) {
    return Array.from({length}, () => Math.floor(Math.random() * (max - min + 1)) + min);
}
```

[Tests]
```js
const arr = randomIntArray(5, 1, 10);
console.assert(arr.length === 5 && arr.every(x => x >= 1 && x <= 10));
```

### Example 125
[Code]
```js
function sumDigits(n) {
    return Math.abs(n).toString().split('').reduce((sum, d) => sum + Number(d), 0);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string manipulation, reduction

[Instruction]
Write a JavaScript function that returns the sum of the digits of a number.

[Response]
```js
function sumDigits(n) {
    return Math.abs(n).toString().split('').reduce((sum, d) => sum + Number(d), 0);
}
```

[Tests]
```js
console.assert(sumDigits(1234) === 10);
```

### Example 126
[Code]
```js
function digitalRoot(n) {
    while (n >= 10) {
        n = n.toString().split('').reduce((sum, d) => sum + Number(d), 0);
    }
    return n;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: loops, reduction

[Instruction]
Write a JavaScript function that computes the digital root of a number.

[Response]
```js
function digitalRoot(n) {
    while (n >= 10) {
        n = n.toString().split('').reduce((sum, d) => sum + Number(d), 0);
    }
    return n;
}
```

[Tests]
```js
console.assert(digitalRoot(12345) === 6);
```

### Example 127
[Code]
```js
function isPalindromeNumber(n) {
    const s = n.toString();
    return s === s.split('').reverse().join('');
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string manipulation, palindrome

[Instruction]
Write a JavaScript function that checks if a number is a palindrome.

[Response]
```js
function isPalindromeNumber(n) {
    const s = n.toString();
    return s === s.split('').reverse().join('');
}
```

[Tests]
```js
console.assert(isPalindromeNumber(121) === true);
console.assert(isPalindromeNumber(123) === false);
```

### Example 128
[Code]
```js
function factorialRecursive(n) {
    if (n < 0) return undefined;
    if (n === 0) return 1;
    return n * factorialRecursive(n - 1);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: recursion, factorial

[Instruction]
Write a JavaScript function that computes the factorial of a number recursively.

[Response]
```js
function factorialRecursive(n) {
    if (n < 0) return undefined;
    if (n === 0) return 1;
    return n * factorialRecursive(n - 1);
}
```

[Tests]
```js
console.assert(factorialRecursive(5) === 120);
```

### Example 129
[Code]
```js
function fibonacciRecursive(n) {
    if (n <= 1) return n;
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: recursion, fibonacci

[Instruction]
Write a JavaScript function that computes the nth Fibonacci number recursively.

[Response]
```js
function fibonacciRecursive(n) {
    if (n <= 1) return n;
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}
```

[Tests]
```js
console.assert(fibonacciRecursive(6) === 8);
```

### Example 130
[Code]
```js
function isArmstrongNumber(n) {
    const digits = n.toString().split('');
    const power = digits.length;
    return n === digits.reduce((sum, d) => sum + Math.pow(Number(d), power), 0);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: string manipulation, math

[Instruction]
Write a JavaScript function that checks if a number is an Armstrong number.

[Response]
```js
function isArmstrongNumber(n) {
    const digits = n.toString().split('');
    const power = digits.length;
    return n === digits.reduce((sum, d) => sum + Math.pow(Number(d), power), 0);
}
```

[Tests]
```js
console.assert(isArmstrongNumber(153) === true);
console.assert(isArmstrongNumber(123) === false);
```

### Example 131
[Code]
```js
function isPerfectNumber(n) {
    let sum = 1;
    for (let i = 2; i <= Math.sqrt(n); i++) {
        if (n % i === 0) {
            sum += i;
            if (i !== n / i) sum += n / i;
        }
    }
    return n > 1 && sum === n;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: hard
concepts: loops, math

[Instruction]
Write a JavaScript function that checks if a number is a perfect number.

[Response]
```js
function isPerfectNumber(n) {
    let sum = 1;
    for (let i = 2; i <= Math.sqrt(n); i++) {
        if (n % i === 0) {
            sum += i;
            if (i !== n / i) sum += n / i;
        }
    }
    return n > 1 && sum === n;
}
```

[Tests]
```js
console.assert(isPerfectNumber(28) === true);
console.assert(isPerfectNumber(27) === false);
```

### Example 132
[Code]
```js
function getDivisors(n) {
    const divisors = [];
    for (let i = 1; i <= Math.sqrt(n); i++) {
        if (n % i === 0) {
            divisors.push(i);
            if (i !== n / i) divisors.push(n / i);
        }
    }
    return divisors.sort((a, b) => a - b);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: loops, math

[Instruction]
Write a JavaScript function that returns all divisors of a number.

[Response]
```js
function getDivisors(n) {
    const divisors = [];
    for (let i = 1; i <= Math.sqrt(n); i++) {
        if (n % i === 0) {
            divisors.push(i);
            if (i !== n / i) divisors.push(n / i);
        }
    }
    return divisors.sort((a, b) => a - b);
}
```

[Tests]
```js
console.assert(JSON.stringify(getDivisors(12)) === JSON.stringify([1,2,3,4,6,12]));
```

### Example 133
[Code]
```js
function isHarshadNumber(n) {
    const sum = n.toString().split('').reduce((a, d) => a + Number(d), 0);
    return n % sum === 0;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: string manipulation, math

[Instruction]
Write a JavaScript function that checks if a number is a Harshad number.

[Response]
```js
function isHarshadNumber(n) {
    const sum = n.toString().split('').reduce((a, d) => a + Number(d), 0);
    return n % sum === 0;
}
```

[Tests]
```js
console.assert(isHarshadNumber(18) === true);
console.assert(isHarshadNumber(19) === false);
```

### Example 134
[Code]
```js
function isPangram(str) {
    return (new Set(str.toLowerCase().replace(/[^a-z]/g, ''))).size === 26;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: sets, string manipulation

[Instruction]
Write a JavaScript function that checks if a string is a pangram.

[Response]
```js
function isPangram(str) {
    return (new Set(str.toLowerCase().replace(/[^a-z]/g, ''))).size === 26;
}
```

[Tests]
```js
console.assert(isPangram("The quick brown fox jumps over the lazy dog") === true);
console.assert(isPangram("Hello world") === false);
```

### Example 135
[Code]
```js
function countUniqueWords(str) {
    return new Set(str.toLowerCase().match(/\b\w+\b/g) || []).size;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: sets, regular expressions

[Instruction]
Write a JavaScript function that counts the number of unique words in a string.

[Response]
```js
function countUniqueWords(str) {
    return new Set(str.toLowerCase().match(/\b\w+\b/g) || []).size;
}
```

[Tests]
```js
console.assert(countUniqueWords("Hello hello world") === 2);
```

### Example 136
[Code]
```js
function getLongestWord(str) {
    return (str.match(/\b\w+\b/g) || []).reduce((a, w) => w.length > a.length ? w : a, "");
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: regular expressions, reduction

[Instruction]
Write a JavaScript function that returns the longest word in a string.

[Response]
```js
function getLongestWord(str) {
    return (str.match(/\b\w+\b/g) || []).reduce((a, w) => w.length > a.length ? w : a, "");
}
```

[Tests]
```js
console.assert(getLongestWord("The quick brown fox") === "quick");
```

### Example 137
[Code]
```js
function getShortestWord(str) {
    return (str.match(/\b\w+\b/g) || []).reduce((a, w) => w.length < a.length ? w : a, str);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: regular expressions, reduction

[Instruction]
Write a JavaScript function that returns the shortest word in a string.

[Response]
```js
function getShortestWord(str) {
    return (str.match(/\b\w+\b/g) || []).reduce((a, w) => w.length < a.length ? w : a, str);
}
```

[Tests]
```js
console.assert(getShortestWord("The quick brown fox") === "The");
```

### Example 138
[Code]
```js
function countSentences(str) {
    return (str.match(/[^.!?]+[.!?]+/g) || []).length;
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: regular expressions, string parsing

[Instruction]
Write a JavaScript function that counts the number of sentences in a string.

[Response]
```js
function countSentences(str) {
    return (str.match(/[^.!?]+[.!?]+/g) || []).length;
}
```

[Tests]
```js
console.assert(countSentences("Hello. How are you? Fine!") === 3);
```

### Example 139
[Code]
```js
function reverseWords(str) {
    return str.split(' ').reverse().join(' ');
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string splitting, reversing

[Instruction]
Write a JavaScript function that reverses the order of words in a string.

[Response]
```js
function reverseWords(str) {
    return str.split(' ').reverse().join(' ');
}
```

[Tests]
```js
console.assert(reverseWords("one two three") === "three two one");
```

### Example 140
[Code]
```js
function capitalizeFirst(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string manipulation

[Instruction]
Write a JavaScript function that capitalizes the first character of a string.

[Response]
```js
function capitalizeFirst(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
```

[Tests]
```js
console.assert(capitalizeFirst("hello") === "Hello");
```

### Example 141
[Code]
```js
function decapitalizeFirst(str) {
    return str.charAt(0).toLowerCase() + str.slice(1);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string manipulation

[Instruction]
Write a JavaScript function that lowercases the first character of a string.

[Response]
```js
function decapitalizeFirst(str) {
    return str.charAt(0).toLowerCase() + str.slice(1);
}
```

[Tests]
```js
console.assert(decapitalizeFirst("Hello") === "hello");
```

### Example 142
[Code]
```js
function repeatArray(arr, times) {
    return [].concat(...Array(times).fill(arr));
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: array concatenation, repetition

[Instruction]
Write a JavaScript function that repeats an array a specified number of times.

[Response]
```js
function repeatArray(arr, times) {
    return [].concat(...Array(times).fill(arr));
}
```

[Tests]
```js
console.assert(JSON.stringify(repeatArray([1,2], 3)) === JSON.stringify([1,2,1,2,1,2]));
```

### Example 143
[Code]
```js
function arrayToObject(arr, key) {
    return arr.reduce((obj, item) => {
        obj[item[key]] = item;
        return obj;
    }, {});
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: array reduction, object construction

[Instruction]
Write a JavaScript function that converts an array of objects to an object using a specified key.

[Response]
```js
function arrayToObject(arr, key) {
    return arr.reduce((obj, item) => {
        obj[item[key]] = item;
        return obj;
    }, {});
}
```

[Tests]
```js
console.assert(JSON.stringify(arrayToObject([{id:1,a:2},{id:2,a:3}], 'id')) === JSON.stringify({1:{id:1,a:2},2:{id:2,a:3}}));
```

### Example 144
[Code]
```js
function objectToArray(obj) {
    return Object.keys(obj).map(key => obj[key]);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: object keys, array mapping

[Instruction]
Write a JavaScript function that converts an object to an array of its values.

[Response]
```js
function objectToArray(obj) {
    return Object.keys(obj).map(key => obj[key]);
}
```

[Tests]
```js
console.assert(JSON.stringify(objectToArray({a:1,b:2})) === JSON.stringify([1,2]));
```

### Example 145
[Code]
```js
function getRandomProperty(obj) {
    const keys = Object.keys(obj);
    return obj[keys[Math.floor(Math.random() * keys.length)]];
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: medium
concepts: object keys, random selection

[Instruction]
Write a JavaScript function that returns a random property value from an object.

[Response]
```js
function getRandomProperty(obj) {
    const keys = Object.keys(obj);
    return obj[keys[Math.floor(Math.random() * keys.length)]];
}
```

[Tests]
```js
const o = {a:1,b:2,c:3};
console.assert([1,2,3].includes(getRandomProperty(o)));
```

### Example 146
[Code]
```js
function isHexColor(str) {
    return /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/.test(str);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: regular expressions, validation

[Instruction]
Write a JavaScript function that checks if a string is a valid hex color.

[Response]
```js
function isHexColor(str) {
    return /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/.test(str);
}
```

[Tests]
```js
console.assert(isHexColor("#fff") === true);
console.assert(isHexColor("#123abc") === true);
console.assert(isHexColor("123abc") === false);
```

### Example 147
[Code]
```js
function isAlpha(str) {
    return /^[a-zA-Z]+$/.test(str);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: regular expressions, validation

[Instruction]
Write a JavaScript function that checks if a string contains only alphabetic characters.

[Response]
```js
function isAlpha(str) {
    return /^[a-zA-Z]+$/.test(str);
}
```

[Tests]
```js
console.assert(isAlpha("abcXYZ") === true);
console.assert(isAlpha("abc123") === false);
```

### Example 148
[Code]
```js
function isNumeric(str) {
    return /^-?\d+(\.\d+)?$/.test(str);
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: regular expressions, validation

[Instruction]
Write a JavaScript function that checks if a string is numeric.

[Response]
```js
function isNumeric(str) {
    return /^-?\d+(\.\d+)?$/.test(str);
}
```

[Tests]
```js
console.assert(isNumeric("123") === true);
console.assert(isNumeric("-123.45") === true);
console.assert(isNumeric("abc") === false);
```

### Example 149
[Code]
```js
function isUpperCase(str) {
    return str === str.toUpperCase();
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string manipulation, comparison

[Instruction]
Write a JavaScript function that checks if a string is all uppercase.

[Response]
```js
function isUpperCase(str) {
    return str === str.toUpperCase();
}
```

[Tests]
```js
console.assert(isUpperCase("ABC") === true);
console.assert(isUpperCase("Abc") === false);
```

### Example 150
[Code]
```js
function isLowerCase(str) {
    return str === str.toLowerCase();
}
```

[Property]
category: function implementation
language: JavaScript
difficulty: easy
concepts: string manipulation, comparison

[Instruction]
Write a JavaScript function that checks if a string is all lowercase.

[Response]
```js
function isLowerCase(str) {
    return str === str.toLowerCase();
}
```

[Tests]
```js
console.assert(isLowerCase("abc") === true);
console.assert(isLowerCase("Abc") === false);
```